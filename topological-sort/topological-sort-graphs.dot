digraph Example1 {
    node [shape=circle, style=filled, fillcolor=pink, fontcolor=black, fontsize=18, width=0.75, fontname="Courier", penwidth=0.5];
    edge [len=2.0, penwidth=0.5, arrowsize=0.5];

    # edge [dir=none]
    # edge [dir=back]

    A B C D E F

    A -> B
    A -> C

    B -> {}

    C -> D

    D -> B
    D -> E

    E -> {}

    F -> C
}

digraph Package {
  rankdir=LR
  # edge [dir=back]
  {
    node [style=filled, fillcolor=pink, fontcolor=black]
    "<project>" -> {"@awaitjs/express","cookie-parser","debug","dotenv","eslint","eslint-config-standard","eslint-plugin-import","eslint-plugin-json","eslint-plugin-node","eslint-plugin-promise","eslint-plugin-standard","express","express-handlebars","express-promise-router","handlebars","hbs","http-errors","jsdoc","knex","morgan","nodemon","pg","strftime"}

  }
    "@awaitjs/express" -> {"@types/express","express"}
    "@babel/parser" -> {}
    "@eslint-community/eslint-utils" -> {"eslint","eslint-visitor-keys"}
    "@eslint-community/regexpp" -> {}
    "@eslint/eslintrc" -> {"ajv","debug","espree","globals","ignore","import-fresh","js-yaml","minimatch","strip-json-comments"}
    "@eslint/js" -> {}
    "@humanwhocodes/config-array" -> {"@humanwhocodes/object-schema","debug","minimatch"}
    "@humanwhocodes/module-importer" -> {}
    "@humanwhocodes/object-schema" -> {}
    "@jsdoc/salty" -> {"lodash"}
    "@nodelib/fs.scandir" -> {"@nodelib/fs.stat","run-parallel"}
    "@nodelib/fs.stat" -> {}
    "@nodelib/fs.walk" -> {"@nodelib/fs.scandir","fastq"}
    "@pkgjs/parseargs" -> {}
    "@types/body-parser" -> {"@types/connect","@types/node"}
    "@types/connect" -> {"@types/node"}
    "@types/express" -> {"@types/body-parser","@types/express-serve-static-core","@types/qs","@types/serve-static"}
    "@types/express-serve-static-core" -> {"@types/node","@types/qs","@types/range-parser","@types/send"}
    "@types/json5" -> {}
    "@types/linkify-it" -> {}
    "@types/markdown-it" -> {"@types/linkify-it","@types/mdurl"}
    "@types/mdurl" -> {}
    "@types/mime" -> {}
    "@types/node" -> {}
    "@types/qs" -> {}
    "@types/range-parser" -> {}
    "@types/send" -> {"@types/mime","@types/node"}
    "@types/serve-static" -> {"@types/mime","@types/node"}
    "abbrev" -> {}
    "accepts" -> {"mime-types","negotiator"}
    "acorn" -> {}
    "acorn-jsx" -> {"acorn"}
    "ajv" -> {"fast-deep-equal","fast-json-stable-stringify","json-schema-traverse","uri-js"}
    "ansi-regex" -> {}
    "ansi-styles" -> {"color-convert"}
    "anymatch" -> {"normalize-path","picomatch"}
    "argparse" -> {}
    "array-buffer-byte-length" -> {"call-bind","is-array-buffer"}
    "array-flatten" -> {}
    "array-includes" -> {"call-bind","define-properties","es-abstract","get-intrinsic","is-string"}
    "array.prototype.flat" -> {"call-bind","define-properties","es-abstract","es-shim-unscopables"}
    "array.prototype.flatmap" -> {"call-bind","define-properties","es-abstract","es-shim-unscopables"}
    "available-typed-arrays" -> {}
    "balanced-match" -> {}
    "basic-auth" -> {"safe-buffer"}
    "binary-extensions" -> {}
    "bluebird" -> {}
    "body-parser" -> {"bytes","content-type","debug","depd","destroy","http-errors","iconv-lite","on-finished","qs","raw-body","type-is","unpipe"}
    "brace-expansion" -> {"balanced-match","concat-map"}
    "braces" -> {"fill-range"}
    "buffer-writer" -> {}
    "builtins" -> {"semver"}
    "bytes" -> {}
    "call-bind" -> {"function-bind","get-intrinsic"}
    "callsites" -> {}
    "catharsis" -> {"lodash"}
    "chalk" -> {"ansi-styles","supports-color"}
    "chokidar" -> {"anymatch","braces","fsevents","glob-parent","is-binary-path","is-glob","normalize-path","readdirp"}
    "cliui" -> {"string-width","strip-ansi","wrap-ansi"}
    "color-convert" -> {"color-name"}
    "color-name" -> {}
    "colorette" -> {}
    "commander" -> {}
    "concat-map" -> {}
    "content-disposition" -> {"safe-buffer"}
    "content-type" -> {}
    "cookie" -> {}
    "cookie-parser" -> {"cookie","cookie-signature"}
    "cookie-signature" -> {}
    "cross-spawn" -> {"path-key","shebang-command","which"}
    "debug" -> {"ms"}
    "deep-is" -> {}
    "define-properties" -> {"has-property-descriptors","object-keys"}
    "depd" -> {}
    "destroy" -> {}
    "doctrine" -> {"esutils"}
    "dotenv" -> {}
    "ee-first" -> {}
    "emoji-regex" -> {}
    "encodeurl" -> {}
    "entities" -> {}
    "es-abstract" -> {"array-buffer-byte-length","available-typed-arrays","call-bind","es-set-tostringtag","es-to-primitive","function.prototype.name","get-intrinsic","get-symbol-description","globalthis","gopd","has","has-property-descriptors","has-proto","has-symbols","internal-slot","is-array-buffer","is-callable","is-negative-zero","is-regex","is-shared-array-buffer","is-string","is-typed-array","is-weakref","object-inspect","object-keys","object.assign","regexp.prototype.flags","safe-regex-test","string.prototype.trim","string.prototype.trimend","string.prototype.trimstart","typed-array-length","unbox-primitive","which-typed-array"}
    "es-set-tostringtag" -> {"get-intrinsic","has","has-tostringtag"}
    "es-shim-unscopables" -> {"has"}
    "es-to-primitive" -> {"is-callable","is-date-object","is-symbol"}
    "escalade" -> {}
    "escape-html" -> {}
    "escape-string-regexp" -> {}
    "eslint" -> {"@eslint-community/eslint-utils","@eslint-community/regexpp","@eslint/eslintrc","@eslint/js","@humanwhocodes/config-array","@humanwhocodes/module-importer","@nodelib/fs.walk","ajv","chalk","cross-spawn","debug","doctrine","escape-string-regexp","eslint-scope","eslint-visitor-keys","espree","esquery","esutils","fast-deep-equal","file-entry-cache","find-up","glob-parent","globals","grapheme-splitter","ignore","import-fresh","imurmurhash","is-glob","is-path-inside","js-sdsl","js-yaml","json-stable-stringify-without-jsonify","levn","lodash.merge","minimatch","natural-compare","optionator","strip-ansi","strip-json-comments","text-table"}
    "eslint-config-standard" -> {"eslint","eslint-plugin-import","eslint-plugin-n","eslint-plugin-promise"}
    "eslint-import-resolver-node" -> {"debug","is-core-module","resolve"}
    "eslint-module-utils" -> {"debug"}
    "eslint-plugin-es" -> {"eslint","eslint-utils","regexpp"}
    "eslint-plugin-import" -> {"array-includes","array.prototype.flat","array.prototype.flatmap","debug","doctrine","eslint","eslint-import-resolver-node","eslint-module-utils","has","is-core-module","is-glob","minimatch","object.values","resolve","semver","tsconfig-paths"}
    "eslint-plugin-json" -> {"lodash","vscode-json-languageservice"}
    "eslint-plugin-n" -> {"builtins","eslint","eslint-plugin-es","eslint-utils","ignore","is-core-module","minimatch","resolve","semver"}
    "eslint-plugin-node" -> {"eslint","eslint-plugin-es","eslint-utils","ignore","minimatch","resolve","semver"}
    "eslint-plugin-promise" -> {"eslint"}
    "eslint-plugin-standard" -> {"eslint"}
    "eslint-scope" -> {"esrecurse","estraverse"}
    "eslint-utils" -> {"eslint","eslint-visitor-keys"}
    "eslint-visitor-keys" -> {}
    "esm" -> {}
    "espree" -> {"acorn","acorn-jsx","eslint-visitor-keys"}
    "esquery" -> {"estraverse"}
    "esrecurse" -> {"estraverse"}
    "estraverse" -> {}
    "esutils" -> {}
    "etag" -> {}
    "express" -> {"accepts","array-flatten","body-parser","content-disposition","content-type","cookie","cookie-signature","debug","depd","encodeurl","escape-html","etag","finalhandler","fresh","http-errors","merge-descriptors","methods","on-finished","parseurl","path-to-regexp","proxy-addr","qs","range-parser","safe-buffer","send","serve-static","setprototypeof","statuses","type-is","utils-merge","vary"}
    "express-handlebars" -> {"glob","graceful-fs","handlebars"}
    "express-promise-router" -> {"@types/express","express","is-promise","lodash.flattendeep","methods"}
    "fast-deep-equal" -> {}
    "fast-json-stable-stringify" -> {}
    "fast-levenshtein" -> {}
    "fastq" -> {"reusify"}
    "file-entry-cache" -> {"flat-cache"}
    "fill-range" -> {"to-regex-range"}
    "finalhandler" -> {"debug","encodeurl","escape-html","on-finished","parseurl","statuses","unpipe"}
    "find-up" -> {"locate-path","path-exists"}
    "flat-cache" -> {"flatted","rimraf"}
    "flatted" -> {}
    "for-each" -> {"is-callable"}
    "foreachasync" -> {}
    "foreground-child" -> {"cross-spawn","signal-exit"}
    "forwarded" -> {}
    "fresh" -> {}
    "fs.realpath" -> {}
    "fsevents" -> {}
    "function-bind" -> {}
    "function.prototype.name" -> {"call-bind","define-properties","es-abstract","functions-have-names"}
    "functions-have-names" -> {}
    "get-intrinsic" -> {"function-bind","has","has-symbols"}
    "get-package-type" -> {}
    "get-symbol-description" -> {"call-bind","get-intrinsic"}
    "getopts" -> {}
    "glob" -> {"foreground-child","jackspeak","minimatch","minipass","path-scurry"}
    "glob-parent" -> {"is-glob"}
    "globals" -> {"type-fest"}
    "globalthis" -> {"define-properties"}
    "gopd" -> {"get-intrinsic"}
    "graceful-fs" -> {}
    "grapheme-splitter" -> {}
    "handlebars" -> {"minimist","neo-async","source-map","uglify-js","wordwrap"}
    "has" -> {"function-bind"}
    "has-bigints" -> {}
    "has-flag" -> {}
    "has-property-descriptors" -> {"get-intrinsic"}
    "has-proto" -> {}
    "has-symbols" -> {}
    "has-tostringtag" -> {"has-symbols"}
    "hbs" -> {"handlebars","walk"}
    "http-errors" -> {"depd","inherits","setprototypeof","statuses","toidentifier"}
    "iconv-lite" -> {"safer-buffer"}
    "ignore" -> {}
    "ignore-by-default" -> {}
    "import-fresh" -> {"parent-module","resolve-from"}
    "imurmurhash" -> {}
    "inflight" -> {"once","wrappy"}
    "inherits" -> {}
    "internal-slot" -> {"get-intrinsic","has","side-channel"}
    "interpret" -> {}
    "ipaddr.js" -> {}
    "is-array-buffer" -> {"call-bind","get-intrinsic","is-typed-array"}
    "is-bigint" -> {"has-bigints"}
    "is-binary-path" -> {"binary-extensions"}
    "is-boolean-object" -> {"call-bind","has-tostringtag"}
    "is-callable" -> {}
    "is-core-module" -> {"has"}
    "is-date-object" -> {"has-tostringtag"}
    "is-extglob" -> {}
    "is-fullwidth-code-point" -> {}
    "is-glob" -> {"is-extglob"}
    "is-negative-zero" -> {}
    "is-number" -> {}
    "is-number-object" -> {"has-tostringtag"}
    "is-path-inside" -> {}
    "is-promise" -> {}
    "is-regex" -> {"call-bind","has-tostringtag"}
    "is-shared-array-buffer" -> {"call-bind"}
    "is-string" -> {"has-tostringtag"}
    "is-symbol" -> {"has-symbols"}
    "is-typed-array" -> {"available-typed-arrays","call-bind","for-each","gopd","has-tostringtag"}
    "is-weakref" -> {"call-bind"}
    "isexe" -> {}
    "jackspeak" -> {"@pkgjs/parseargs","cliui"}
    "js-sdsl" -> {}
    "js-yaml" -> {"argparse"}
    "js2xmlparser" -> {"xmlcreate"}
    "jsdoc" -> {"@babel/parser","@jsdoc/salty","@types/markdown-it","bluebird","catharsis","escape-string-regexp","js2xmlparser","klaw","markdown-it","markdown-it-anchor","marked","mkdirp","requizzle","strip-json-comments","underscore"}
    "json-schema-traverse" -> {}
    "json-stable-stringify-without-jsonify" -> {}
    "json5" -> {"minimist"}
    "jsonc-parser" -> {}
    "klaw" -> {"graceful-fs"}
    "knex" -> {"colorette","commander","debug","escalade","esm","get-package-type","getopts","interpret","lodash","pg-connection-string","rechoir","resolve-from","tarn","tildify"}
    "levn" -> {"prelude-ls","type-check"}
    "linkify-it" -> {"uc.micro"}
    "locate-path" -> {"p-locate"}
    "lodash" -> {}
    "lodash.flattendeep" -> {}
    "lodash.merge" -> {}
    "lru-cache" -> {}
    "markdown-it" -> {"argparse","entities","linkify-it","mdurl","uc.micro"}
    "markdown-it-anchor" -> {"@types/markdown-it","markdown-it"}
    "marked" -> {}
    "mdurl" -> {}
    "media-typer" -> {}
    "merge-descriptors" -> {}
    "methods" -> {}
    "mime" -> {}
    "mime-db" -> {}
    "mime-types" -> {"mime-db"}
    "minimatch" -> {"brace-expansion"}
    "minimist" -> {}
    "minipass" -> {}
    "mkdirp" -> {}
    "morgan" -> {"basic-auth","debug","depd","on-finished","on-headers"}
    "ms" -> {}
    "natural-compare" -> {}
    "negotiator" -> {}
    "neo-async" -> {}
    "nodemon" -> {"chokidar","debug","ignore-by-default","minimatch","pstree.remy","semver","simple-update-notifier","supports-color","touch","undefsafe"}
    "nopt" -> {"abbrev"}
    "normalize-path" -> {}
    "object-inspect" -> {}
    "object-keys" -> {}
    "object.assign" -> {"call-bind","define-properties","has-symbols","object-keys"}
    "object.values" -> {"call-bind","define-properties","es-abstract"}
    "on-finished" -> {"ee-first"}
    "on-headers" -> {}
    "once" -> {"wrappy"}
    "optionator" -> {"deep-is","fast-levenshtein","levn","prelude-ls","type-check","word-wrap"}
    "p-limit" -> {"yocto-queue"}
    "p-locate" -> {"p-limit"}
    "packet-reader" -> {}
    "parent-module" -> {"callsites"}
    "parseurl" -> {}
    "path-exists" -> {}
    "path-is-absolute" -> {}
    "path-key" -> {}
    "path-parse" -> {}
    "path-scurry" -> {"lru-cache","minipass"}
    "path-to-regexp" -> {}
    "pg" -> {"buffer-writer","packet-reader","pg-connection-string","pg-native","pg-pool","pg-protocol","pg-types","pgpass"}
    "pg-connection-string" -> {}
    "pg-int8" -> {}
    "pg-pool" -> {"pg"}
    "pg-protocol" -> {}
    "pg-types" -> {"pg-int8","postgres-array","postgres-bytea","postgres-date","postgres-interval"}
    "pgpass" -> {"split2"}
    "picomatch" -> {}
    "postgres-array" -> {}
    "postgres-bytea" -> {}
    "postgres-date" -> {}
    "postgres-interval" -> {"xtend"}
    "prelude-ls" -> {}
    "proxy-addr" -> {"forwarded","ipaddr.js"}
    "pstree.remy" -> {}
    "punycode" -> {}
    "qs" -> {"side-channel"}
    "queue-microtask" -> {}
    "range-parser" -> {}
    "raw-body" -> {"bytes","http-errors","iconv-lite","unpipe"}
    "readdirp" -> {"picomatch"}
    "rechoir" -> {"resolve"}
    "regexp.prototype.flags" -> {"call-bind","define-properties","functions-have-names"}
    "regexpp" -> {}
    "requizzle" -> {"lodash"}
    "resolve" -> {"is-core-module","path-parse","supports-preserve-symlinks-flag"}
    "resolve-from" -> {}
    "reusify" -> {}
    "rimraf" -> {"glob"}
    "run-parallel" -> {"queue-microtask"}
    "safe-buffer" -> {}
    "safe-regex-test" -> {"call-bind","get-intrinsic","is-regex"}
    "safer-buffer" -> {}
    "semver" -> {}
    "send" -> {"debug","depd","destroy","encodeurl","escape-html","etag","fresh","http-errors","mime","ms","on-finished","range-parser","statuses"}
    "serve-static" -> {"encodeurl","escape-html","parseurl","send"}
    "setprototypeof" -> {}
    "shebang-command" -> {"shebang-regex"}
    "shebang-regex" -> {}
    "side-channel" -> {"call-bind","get-intrinsic","object-inspect"}
    "signal-exit" -> {}
    "simple-update-notifier" -> {"semver"}
    "source-map" -> {}
    "split2" -> {}
    "statuses" -> {}
    "strftime" -> {}
    "string-width" -> {"emoji-regex","is-fullwidth-code-point","strip-ansi"}
    "string.prototype.trim" -> {"call-bind","define-properties","es-abstract"}
    "string.prototype.trimend" -> {"call-bind","define-properties","es-abstract"}
    "string.prototype.trimstart" -> {"call-bind","define-properties","es-abstract"}
    "strip-ansi" -> {"ansi-regex"}
    "strip-bom" -> {}
    "strip-json-comments" -> {}
    "supports-color" -> {"has-flag"}
    "supports-preserve-symlinks-flag" -> {}
    "tarn" -> {}
    "text-table" -> {}
    "tildify" -> {}
    "to-regex-range" -> {"is-number"}
    "toidentifier" -> {}
    "touch" -> {"nopt"}
    "tsconfig-paths" -> {"@types/json5","json5","minimist","strip-bom"}
    "type-check" -> {"prelude-ls"}
    "type-fest" -> {}
    "type-is" -> {"media-typer","mime-types"}
    "typed-array-length" -> {"call-bind","for-each","is-typed-array"}
    "uc.micro" -> {}
    "uglify-js" -> {}
    "unbox-primitive" -> {"call-bind","has-bigints","has-symbols","which-boxed-primitive"}
    "undefsafe" -> {}
    "underscore" -> {}
    "unpipe" -> {}
    "uri-js" -> {"punycode"}
    "utils-merge" -> {}
    "vary" -> {}
    "vscode-json-languageservice" -> {"jsonc-parser","vscode-languageserver-textdocument","vscode-languageserver-types","vscode-nls","vscode-uri"}
    "vscode-languageserver-textdocument" -> {}
    "vscode-languageserver-types" -> {}
    "vscode-nls" -> {}
    "vscode-uri" -> {}
    "walk" -> {"foreachasync"}
    "which" -> {"isexe"}
    "which-boxed-primitive" -> {"is-bigint","is-boolean-object","is-number-object","is-string","is-symbol"}
    "which-typed-array" -> {"available-typed-arrays","call-bind","for-each","gopd","has-tostringtag","is-typed-array"}
    "word-wrap" -> {}
    "wordwrap" -> {}
    "wrap-ansi" -> {"ansi-styles","string-width","strip-ansi"}
    "wrappy" -> {}
    "xmlcreate" -> {}
    "xtend" -> {}
    "yallist" -> {}
    "yocto-queue" -> {}
}

digraph AgeGame {
    node [shape=circle, style=filled, fillcolor=pink, fontcolor=black, fontsize=12, width=1.0, height=1.0, fontname="Courier", penwidth=0.5];
    edge [len=2.0, penwidth=0.5, arrowsize=0.5];

    Steve -> Mei
    Mei -> Noor
    Steve -> Amir
    Amir -> Noor
    Mei -> Sofia
    Mei -> Zara
    Dmitri -> Zara
    Sofia -> Amir
    Amir -> Dmitri
    Dmitri -> Kendrick
    Kendrick -> Zara
}
